// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatureApi;

#nullable disable

namespace natureApi.Migrations
{
    [DbContext(typeof(NatureDbContext))]
    partial class NatureDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenityPlace", b =>
                {
                    b.Property<int>("AmenitiesId")
                        .HasColumnType("int");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.HasKey("AmenitiesId", "PlacesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("AmenityPlace");
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Baños"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Estacionamiento"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mirador"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Área de comida"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Zona de campamento"
                        });
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idPlace")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Reserva de la Biósfera Mariposa Monarca",
                            PlaceId = 1,
                            Url = "https://cdn.milenio.com/uploads/media/2015/10/23/tala-ilegal-reserva-biosfera-mariposa.jpeg",
                            idPlace = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sótano de las Golondrinas",
                            PlaceId = 2,
                            Url = "https://transpais.com.mx/wp-content/uploads/2023/04/golondrinas.jpg",
                            idPlace = 0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cráteres de El Pinacate",
                            PlaceId = 3,
                            Url = "https://rocateca.unison.mx/wp-content/uploads/2020/09/el-elegante.jpg",
                            idPlace = 0
                        },
                        new
                        {
                            Id = 4,
                            Description = "Prismas Basálticos",
                            PlaceId = 4,
                            Url = "https://www.huascaguiaturistica.com/huasca-imagenes/1-prismas-basalticos.jpg",
                            idPlace = 0
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sima de las Cotorras",
                            PlaceId = 5,
                            Url = "https://mxc.com.mx/wp-content/uploads/2021/02/sima-de-las-cotorras-1024x576.jpg",
                            idPlace = 0
                        });
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accessible")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElevationMeters")
                        .HasColumnType("int");

                    b.Property<double?>("EntryFee")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHours")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Place");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessible = true,
                            Category = "reserva",
                            CreatedAt = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Santuario natural en Michoacán, hábitat invernal de la mariposa monarca.",
                            ElevationMeters = 3000,
                            EntryFee = 70.0,
                            Latitude = 19.631,
                            Longitude = -100.283,
                            Name = "Reserva de la Biósfera Mariposa Monarca",
                            OpeningHours = "09:00-17:00"
                        },
                        new
                        {
                            Id = 2,
                            Accessible = true,
                            Category = "cueva",
                            CreatedAt = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cueva vertical en San Luis Potosí famosa por el vuelo de miles de aves.",
                            ElevationMeters = 900,
                            EntryFee = 100.0,
                            Latitude = 21.597000000000001,
                            Longitude = -99.097999999999999,
                            Name = "Sótano de las Golondrinas",
                            OpeningHours = "07:00-18:00"
                        },
                        new
                        {
                            Id = 3,
                            Accessible = true,
                            Category = "volcán",
                            CreatedAt = new DateTime(2024, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Campo volcánico con cráteres impresionantes en Sonora.",
                            ElevationMeters = 1200,
                            EntryFee = 70.0,
                            Latitude = 31.783000000000001,
                            Longitude = -113.533,
                            Name = "Cráteres de El Pinacate",
                            OpeningHours = "08:00-17:00"
                        },
                        new
                        {
                            Id = 4,
                            Accessible = true,
                            Category = "formación geológica",
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Formaciones geométricas de basalto en Hidalgo.",
                            ElevationMeters = 2100,
                            EntryFee = 80.0,
                            Latitude = 20.210999999999999,
                            Longitude = -98.581000000000003,
                            Name = "Prismas Basálticos",
                            OpeningHours = "09:00-18:00"
                        },
                        new
                        {
                            Id = 5,
                            Accessible = true,
                            Category = "sima",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hundimiento natural en Chiapas con selva en el interior.",
                            ElevationMeters = 900,
                            EntryFee = 60.0,
                            Latitude = 16.725999999999999,
                            Longitude = -93.367999999999995,
                            Name = "Sima de las Cotorras",
                            OpeningHours = "07:00-17:00"
                        });
                });

            modelBuilder.Entity("StoreApi.Models.Entities.PlaceAmenity", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PlaceAmenity");

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 1
                        },
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 2,
                            AmenityId = 3
                        },
                        new
                        {
                            PlaceId = 3,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 3,
                            AmenityId = 5
                        },
                        new
                        {
                            PlaceId = 4,
                            AmenityId = 1
                        },
                        new
                        {
                            PlaceId = 4,
                            AmenityId = 4
                        },
                        new
                        {
                            PlaceId = 5,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 5,
                            AmenityId = 3
                        });
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("idPlace")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("idPlace")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Trail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = "easy",
                            DistanceKm = 2.5,
                            EstimatedTimeMinutes = 60,
                            IsLoop = true,
                            Name = "Sendero Mariposas",
                            Path = "[[19.6305,-100.2825],[19.6312,-100.2835],[19.632,-100.284]]",
                            PlaceId = 1,
                            idPlace = 0
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = "hard",
                            DistanceKm = 1.2,
                            EstimatedTimeMinutes = 90,
                            IsLoop = false,
                            Name = "Descenso al sótano",
                            Path = "[[21.597,-99.098],[21.5975,-99.097],[21.598,-99.096]]",
                            PlaceId = 2,
                            idPlace = 0
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = "moderate",
                            DistanceKm = 3.5,
                            EstimatedTimeMinutes = 120,
                            IsLoop = true,
                            Name = "Ruta cráter El Elegante",
                            Path = "[[31.783,-113.533],[31.784,-113.532],[31.785,-113.531]]",
                            PlaceId = 3,
                            idPlace = 0
                        },
                        new
                        {
                            Id = 4,
                            Difficulty = "easy",
                            DistanceKm = 1.0,
                            EstimatedTimeMinutes = 30,
                            IsLoop = true,
                            Name = "Sendero Prismas",
                            Path = "[[20.211,-98.581],[20.212,-98.5805],[20.2125,-98.580]]",
                            PlaceId = 4,
                            idPlace = 0
                        },
                        new
                        {
                            Id = 5,
                            Difficulty = "moderate",
                            DistanceKm = 2.0,
                            EstimatedTimeMinutes = 60,
                            IsLoop = false,
                            Name = "Sendero Sima",
                            Path = "[[16.726,-93.368],[16.727,-93.367],[16.728,-93.366]]",
                            PlaceId = 5,
                            idPlace = 0
                        });
                });

            modelBuilder.Entity("AmenityPlace", b =>
                {
                    b.HasOne("StoreApi.Models.Entities.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApi.Models.Entities.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Photo", b =>
                {
                    b.HasOne("StoreApi.Models.Entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("StoreApi.Models.Entities.PlaceAmenity", b =>
                {
                    b.HasOne("StoreApi.Models.Entities.Amenity", "Amenity")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreApi.Models.Entities.Place", "Place")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Review", b =>
                {
                    b.HasOne("StoreApi.Models.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Trail", b =>
                {
                    b.HasOne("StoreApi.Models.Entities.Place", "Place")
                        .WithMany("Trails")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Amenity", b =>
                {
                    b.Navigation("PlaceAmenities");
                });

            modelBuilder.Entity("StoreApi.Models.Entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("PlaceAmenities");

                    b.Navigation("Reviews");

                    b.Navigation("Trails");
                });
#pragma warning restore 612, 618
        }
    }
}
